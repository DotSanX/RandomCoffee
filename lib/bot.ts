import {
  Bot,
  Context,
  InlineKeyboard,
  Keyboard,
  NextFunction,
} from "https://deno.land/x/grammy@v1.32.0/mod.ts";

// –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Ç–∏–ø –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ ide
interface UserInfo {
  id: number;
  name: string;
  age: number;
  interests: string[];
  geo: Record<string, number>;
  time: string;
  state: string;
}
type MyContext = Context & {
  config: UserInfo;
};

const database = await Deno.openKv();

//–æ–±—ä—è–≤–∏–ª –±–æ—Ç–∞
export const bot = new Bot<MyContext>(Deno.env.get("BOT_TOKEN") || "");

// —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω—É–∂–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º—è –∏–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–∂–∏–¥–∞–µ—Ç –≤—Å—Ç—Ä–µ—á–∏
// –°–ø–∏—Å–æ–∫ states –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:
// setName - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏
// setAge - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
// setInterests - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
// setGeo - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
// setTime - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
// pending - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
// review - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
// searching - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞

// info –±—É–¥–µ—Ç –Ω—É–∂–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ (–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è) - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
const info: UserInfo = {
  id: 0,
  name: "",
  age: 0,
  interests: [],
  geo: {
    latitude: 0,
    longtitude: 0,
  },
  time: "",
  state: "",
};

// –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
const yesOrNo = new InlineKeyboard().text("–î–∞‚úÖ", "interestsDone").text(
  "–ù–µ—Ç‚ùå",
  "interestsNotDone",
);

const menuKeyboard = new Keyboard().text("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§");

// –±—É–¥—É—â–∏–π middleware !–ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –¥–ª—è –±–¥!
bot.use(
  // async (ctx, next) => {
  //   // ctx.config = {
  //   // };
  //   await next();
  // },
);

bot.command("start", async (ctx) => { // –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
  info.id = Number(ctx.msg.from?.id);
  if ((await database.get(["users", info.id])).key != null) {
    info.name = String((await database.get(["users", info.id, "name"])).value);
    info.age = Number((await database.get(["users", info.id, "age"])).value);
    info.interests = Array(
      String((await database.get(["users", info.id, "interests"])).value),
    );
    info.geo.latitude = Number(
      (await database.get(["users", info.id, "geo", "latitude"])).value,
    );
    info.geo.longitiute = Number(
      (await database.get(["users", info.id, "geo", "longtitude"])).value,
    );
    info.time = String((await database.get(["users", info.id, "state"])).value);
    info.state = String(
      (await database.get(["users", info.id, "state"])).value,
    );
    await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${info.name}!`, { reply_markup: menuKeyboard });
  } else {
    await ctx.reply(
      "–ü—Ä–∏–≤–µ—Ç!üëãüèª \n–í–∏–∂—É, —Ç—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ. –Ø - –±–æ—Ç –ö–æ—Ñ—Ñ–∏‚òïÔ∏è. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –ª—é–¥—å–º–∏, –∫–æ—Ç–æ—Ä—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ç–æ –∂–µ, —á—Ç–æ –∏ —Ç–µ–±–µ!",
    );
    await ctx.reply(
      "ü§î –ê –∫–∞–∫ –∑–æ–≤—É—Ç —Ç–µ–±—è? \n <b>–£—á—Ç–∏, —á—Ç–æ —Ç–≤–æ–µ –∏–º—è —É–≤–∏–¥—è—Ç –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.</b>",
      { parse_mode: "HTML" }, // –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–≥–∏ –∏–∑ html
    );
    info.state = "setName"; // —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç—É –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–¥—Ç–∏ –∏–º—è
  }
});

async function setState(state: string) {
  info.state = state;
  await database.set(["users", info.id, "state"], state);
}

const acceptKeyboard = new Keyboard().text("–î–∞!").text("–ù–µ—Ç, —Ö–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å")
  .resized(true);

  const changesKeyboard = new Keyboard().text("–•–æ—á—É –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ").row().text("–ò–º—è").text("–í–æ–∑—Ä–∞—Å—Ç").row().text("–ò–Ω—Ç–µ—Ä–µ—Å—ã").text("–ì–µ–æ–ø–æ–∑–∏—Ü–∏—é").row().text("–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è").resized(true)

async function reviewProfile(ctx: MyContext) {
  await setState("review");
  await ctx.reply("–í–æ—Ç, –∫–∞–∫ —Ç–µ–±—è —É–≤–∏–¥—è—Ç –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:");
  await ctx.reply(
    `${info.name}, ${info.age}\n` +
      `–°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: ${info.interests.toString()}`,
  );
  await ctx.reply("–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è —Ä–∞–π–æ–Ω–∞, –≥–¥–µ –±—É–¥–µ—Ç —É–¥–æ–æ–±–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è:");
  await ctx.replyWithLocation(info.geo.latitude, info.geo.longitiute);
  await ctx.reply("–í—Å–µ –≤–µ—Ä–Ω–æ?", {
    reply_markup: acceptKeyboard,
  });
}

//–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
bot.callbackQuery("interestsDone", async (ctx) => {
  await ctx.deleteMessage();
  await ctx.reply("–û—Ç–ª–∏—á–Ω–æ!");
  await ctx.reply("–í–æ—Ç, –∫–∞–∫ —Ç–µ–±—è —É–≤–∏–¥—è—Ç –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:");
  await reviewProfile(ctx);
});
bot.callbackQuery("interestsNotDone", async (ctx) => {
  await ctx.deleteMessage();
  await ctx.reply("–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏ –µ—â–µ —É–≤–ª–µ—á–µ–Ω–∏–π!");
  info.state = "setInterests";
});

bot.hears(
  ["–ø—Ä–æ—Ñ–∏–ª—å", "–ü—Ä–æ—Ñ–∏–ª—å", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§"],
  async (ctx) => {
    await reviewProfile(ctx);
  },
);

bot.on("message", async (ctx) => {
  if (info.state) { // –ø—Ä–∏ –Ω–µ–ø—É—Å—Ç–æ–º info.state
    switch (info.state) {
      case "setName":
        if (
          typeof ctx.msg.text !== "string" ||
          /[0-9_.*^%$#@!]/.test(ctx.msg.text) // —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤
        ) {
          await ctx.reply(
            "–ò–∑–≤–∏–Ω–∏, –Ω–æ –∏–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ü–∏—Ñ—Ä –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤!",
          );
          return;
        } else {
          info.name = ctx.msg.text || ""; //—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
          await ctx.reply("–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, " + info.name + "!");
          await ctx.reply("–ö—Å—Ç–∞—Ç–∏, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?");
          info.state = "setAge"; // –∏ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        }

        break;

      case "setAge":
        if (isNaN(Number(ctx.msg.text))) {
          await ctx.reply("–ò–∑–≤–∏–Ω–∏, –Ω–æ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º!");
          return;
        }

        info.age = Number(ctx.msg.text);
        await ctx.reply(
          "–û—Ç–ª–∏—á–Ω–æ! ü§© –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è",
        );
        await ctx.reply(
          "üëÄ –ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–∞–∂–º–∏ –Ω–∞ —Å–∫—Ä–µ–ø–∫—ÉüñáÔ∏è -> –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µüìç",
        );
        info.state = "setGeo";
        break;
      case "review": 
        if (ctx.msg.text == "–î–∞!") {
          await ctx.reply("–û—Ç–ª–∏—á–Ω–æ!")
        } else if (ctx.msg.text == "–ù–µ—Ç, —Ö–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å"){
          await ctx.reply("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å", {reply_markup: changesKeyboard})
        }else {
          await ctx.reply("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ Telegram!")
        }
        break
      case "setGeo":
        if (!ctx.msg.location) {
          await ctx.reply(
            "ü§î –Ø –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
          );
          return;
        }

        info.geo.latitude = ctx.msg.location?.latitude;
        info.geo.longitiute = ctx.msg.location?.longitude; // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –≤ –≤–∏–¥–µ: —à–∏—Ä–∏–Ω–∞, –¥–æ–ª–≥–æ—Ç–∞
        await ctx.reply(
          "üòé –ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ. –ü–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å–≤–æ–∏ —Ö–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è!",
        );
        info.state = "setInterests";
        break;

      case "setInterests":
        if (ctx.msg.text) {
          for (const interest of ctx.msg.text?.split(",")) {
            info.interests.push(interest.trim());
          }
        }
        await ctx.reply(
          "üèÜ –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:",
        );
        await ctx.reply(
          info.interests.toString(),
        );
        await ctx.reply("–≠—Ç–æ –≤—Å–µ?", { reply_markup: yesOrNo }); // —Å–º–æ—Ç—Ä–∏ bot.callbackQuery
        break;
      default:
        break;
    }
  }
});
