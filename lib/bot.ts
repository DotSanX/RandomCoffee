import { Bot, Context, InlineKeyboard } from "https://deno.land/x/grammy@v1.32.0/mod.ts";

// –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Ç–∏–ø –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ ide
interface UserInfo {
  name: string,
  age: number,
  interests : string[],
  geo: string,
  time: string,
}
type MyContext = Context & {
  config: UserInfo;
};

//–æ–±—ä—è–≤–∏–ª –±–æ—Ç–∞
export const bot = new Bot<MyContext>(Deno.env.get("BOT_TOKEN") || "");

let state = ""; // —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω—É–∂–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º—è –∏–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–∂–∏–¥–∞–µ—Ç –≤—Å—Ç—Ä–µ—á–∏
// –°–ø–∏—Å–æ–∫ states –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:
// setName - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏
// setAge - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
// setInterests - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
// setGeo - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
// setTime - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
// Pending - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è 
// Searching - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞

// info –±—É–¥–µ—Ç –Ω—É–∂–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ (–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è) - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
const info: UserInfo = {
  name: "",
  age: 0,
  interests : [],
  geo: "",
  time: ""
};

// –±—É–¥—É—â–∏–π middleware !–ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –¥–ª—è –±–¥!
bot.use(
  async (ctx, next) => {
    // ctx.config = {
    // };
    await next();
  },
);

bot.command("start", async (ctx) => { // –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
  await ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç!üëãüèª \n–í–∏–∂—É, —Ç—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ. –Ø - –±–æ—Ç –ö–æ—Ñ—Ñ–∏‚òïÔ∏è. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –ª—é–¥—å–º–∏, –∫–æ—Ç–æ—Ä—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ç–æ –∂–µ, —á—Ç–æ –∏ —Ç–µ–±–µ!",
  );
  await ctx.reply(
    "ü§î –ê –∫–∞–∫ –∑–æ–≤—É—Ç —Ç–µ–±—è? \n <b>–£—á—Ç–∏, —á—Ç–æ —Ç–≤–æ–µ –∏–º—è —É–≤–∏–¥—è—Ç –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.</b>",
    { parse_mode: "HTML" }, // –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–≥–∏ –∏–∑ html
  );
  state = "setName"; // —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç—É –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–¥—Ç–∏ –∏–º—è
});

// –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
const yesOrNo = new InlineKeyboard().text("–î–∞‚úÖ", "interestsDone").text("–ù–µ—Ç‚ùå", "interestsNotDone")

//–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
bot.callbackQuery("interestsDone", async ctx=>{
  await ctx.deleteMessage()
  await ctx.reply("–û—Ç–ª–∏—á–Ω–æ!")
  state = "pending";
})
bot.callbackQuery("interestsNotDone", async ctx=>{
  await ctx.deleteMessage()
  await ctx.reply("–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏ –µ—â–µ —É–≤–ª–µ—á–µ–Ω–∏–π!")
  state = "setInterests";
})

bot.on("message", async (ctx) => {
  if (state) { // –ø—Ä–∏ –Ω–µ–ø—É—Å—Ç–æ–º state
    switch (state) {
      case "setName":
        info.name = ctx.msg.text || ""; //—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        await ctx.reply("–û—Ç–ª–∏—á–Ω–æ–µ –∏–º—è, " + info.name + "!");
        await ctx.reply("–ö—Å—Ç–∞—Ç–∏, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?");
        state = "setAge"; // –∏ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        break;

      case "setAge":
        info.age = Number(ctx.msg.text);
        await ctx.reply(
          "–û—Ç–ª–∏—á–Ω–æ! ü§© –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è",
        );
        await ctx.reply(
          "üëÄ –ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–∞–∂–º–∏ –Ω–∞ —Å–∫—Ä–µ–ø–∫—ÉüñáÔ∏è -> –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µüìç",
        );
        state = "setGeo";
        break;

      case "setGeo":
        info.geo =
          `${ctx.msg.location?.latitude}, ${ctx.msg.location?.longitude}`; // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –≤ –≤–∏–¥–µ: —à–∏—Ä–∏–Ω–∞, –¥–æ–ª–≥–æ—Ç–∞
        await ctx.reply(
          "üòé –ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ. –ü–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å–≤–æ–∏ —Ö–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è!",
        );
        state = "setInterests";
        break;

      case "setInterests":
        if (ctx.msg.text) {
          for (const interest of ctx.msg.text?.split(",")) {
            info.interests.push(interest.trim());
          }
        }
        await ctx.reply(
          "üèÜ –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:"
        );
        await ctx.reply(
          info.interests.toString()
        );
        await ctx.reply("–≠—Ç–æ –≤—Å–µ?", {reply_markup: yesOrNo});// —Å–º–æ—Ç—Ä–∏ bot.callbackQuery
        break;
      default:
        break;
    }
  }
});
